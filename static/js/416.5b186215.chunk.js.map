{"version":3,"file":"static/js/416.5b186215.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/input/src/input-group.tsx","../node_modules/@chakra-ui/input/src/input-element.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/icons/src/View.tsx","../node_modules/@chakra-ui/icons/src/ViewOff.tsx","components/RegisterForm/RegisterForm.js","pages/Register.jsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" />\n      <path d=\"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" />\n    </g>\n  ),\n})\n","import { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { register } from 'redux/auth/operations';\nimport toast from 'react-hot-toast';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  Button,\n  Heading,\n  Text,\n  ScaleFade,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport { useState } from 'react';\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const email = form.elements.email.value;\n    const password = form.elements.password.value;\n    const name = form.elements.name.value;\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n    toast.success(`You are registered 🤗, ${name}`, {\n      duration: 3000,\n      position: 'top-right',\n    });\n    form.reset();\n  };\n\n  return (\n    <>\n      <Flex align={'center'} justify={'center'}>\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'} textAlign={'center'}>\n              Sign up\n            </Heading>\n            <Text fontSize={'lg'} color={'gray.600'}>\n              to save your contacts ☎️\n            </Text>\n          </Stack>\n          <ScaleFade initialScale={0.7} in>\n            <Box\n              rounded={'lg'}\n              bgGradient=\"linear(to-r, green.200, pink.500)\"\n              boxShadow={'lg'}\n              p={8}\n            >\n              <Stack spacing={20} w={'350px'}>\n                <form onSubmit={handleSubmit}>\n                  <Stack spacing={4}>\n                    <FormControl>\n                      <FormLabel isRequired>\n                        Username*\n                        <Input\n                          required\n                          autoComplete=\"off\"\n                          type=\"text\"\n                          name=\"name\"\n                          placeholder=\"Jacob Mercer\"\n                          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        />\n                      </FormLabel>\n                    </FormControl>\n                    <FormControl>\n                      <FormLabel>\n                        Email*\n                        <Input\n                          autoComplete=\"off\"\n                          type=\"email\"\n                          name=\"email\"\n                          placeholder=\"across@mail.com\"\n                        />\n                      </FormLabel>\n                    </FormControl>\n                    <FormControl>\n                      <FormLabel>\n                        Password*\n                        <InputGroup>\n                          <Input\n                            autoComplete=\"off\"\n                            name=\"password\"\n                            type={showPassword ? 'text' : 'password'}\n                          />\n                          <InputRightElement h={'full'}>\n                            <Button\n                              variant={'ghost'}\n                              onClick={() =>\n                                setShowPassword(showPassword => !showPassword)\n                              }\n                            >\n                              {showPassword ? <ViewIcon /> : <ViewOffIcon />}\n                            </Button>\n                          </InputRightElement>\n                        </InputGroup>\n                      </FormLabel>\n                    </FormControl>\n                    <Stack spacing={10} pt={2}>\n                      <Button\n                        type=\"submit\"\n                        loadingText=\"Submitting\"\n                        size=\"lg\"\n                        colorScheme=\"blue\"\n                      >\n                        Registration\n                      </Button>\n                    </Stack>\n                    <Stack pt={6}>\n                      <Text align={'center'}>\n                        Already a user?\n                        <Link\n                          style={{\n                            color: '#66bfbf',\n                            marginLeft: '6px',\n                            textDecoration: 'underline',\n                          }}\n                          to=\"/login\"\n                        >\n                          Login\n                        </Link>\n                      </Text>\n                    </Stack>\n                  </Stack>\n                </form>\n              </Stack>\n            </Box>\n          </ScaleFade>\n        </Stack>\n      </Flex>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["createContext","name","errorMessage","InputGroupStylesProvider","useInputGroupStyles","InputGroup","forwardRef","props","ref","styles","useMultiStyleConfig","omitThemingProps","children","className","rest","_className","cx","groupStyles","validChildren","getValidChildren","input","field","forEach","child","type","id","paddingStart","_a","height","h","paddingEnd","_b","borderEndRadius","borderStartRadius","clones","map","theming","compact","size","variant","cloneElement","Object","assign","chakra","div","__css","width","display","position","isolation","group","value","displayName","StyledInputElement","baseStyle","alignItems","justifyContent","top","zIndex","InputElement","placement","attr","elementStyles","fontSize","element","InputLeftElement","InputRightElement","createIcon","options","viewBox","pathDefinition","d","defaultProps","path","Children","toArray","Comp","Icon","length","fill","ViewIcon","cy","r","ViewOffIcon","RegisterForm","useState","showPassword","setShowPassword","dispatch","useDispatch","align","justify","spacing","mx","maxW","py","px","textAlign","color","initialScale","in","rounded","bgGradient","boxShadow","p","w","onSubmit","e","preventDefault","form","currentTarget","email","elements","password","register","toast","success","duration","reset","isRequired","I","required","autoComplete","placeholder","pattern","title","onClick","pt","loadingText","colorScheme","style","marginLeft","textDecoration","to","Register"],"sourceRoot":""}